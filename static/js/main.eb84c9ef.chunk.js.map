{"version":3,"sources":["components/weather/weathercard.js","components/weather/temp.js","App.js","reportWebVitals.js","index.js"],"names":["Weathercard","tempInfo","React","useState","weatherState","setWeatherState","temp","humidity","pressure","weathermood","name","speed","country","sunset","useEffect","date","Date","timeStr","getHours","getMinutes","className","toLocaleString","Temp","searchValue","setSearchValue","setTempInfo","getWeatherInfo","a","url","fetch","res","json","data","main","weather","wind","sys","console","log","type","placeholder","autoFocus","id","value","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb84c9ef.chunk.js","sourcesContent":["import React ,{useEffect}from 'react'\r\n\r\nconst Weathercard = ({tempInfo}) => {\r\n  const[weatherState,setWeatherState]=React.useState(\"\");\r\n    const{ temp,\r\n        humidity,\r\n        pressure,\r\n        weathermood,\r\n        name,\r\n        speed,\r\n        country,\r\n        sunset,}=tempInfo;\r\n\r\n     useEffect(() => {\r\n         if(weathermood){\r\n             switch(weathermood){\r\n             case \"Clouds\":\r\n                 setWeatherState(\"wi-day-cloudy\");\r\n             break;\r\n             case \"Clear\":\r\n                 setWeatherState(\"wi-day-sunny\");\r\n             break;\r\n             case \"Haze\":setWeatherState(\"wi-fog\");\r\n             break;\r\n             case \"Rain\":setWeatherState(\"wi-rain\");\r\n             break;\r\n             case \"Smoke\":setWeatherState(\"wi-smoke\");\r\n             break;\r\n             default:\r\n                setWeatherState(\"wi-day-sunny\");\r\n                break;\r\n             }\r\n         }\r\n     }, [weathermood])\r\n\r\n        let sec=sunset;\r\n        let date=new Date(sec*1000);\r\n        let timeStr=`${date.getHours()}:${date.getMinutes()}`;\r\n    return (\r\n        <>\r\n            <article className=\"widget\">\r\n            <div className=\"weatherIcon\">\r\n                <i className={`wi ${weatherState}`}></i>\r\n            </div>\r\n            <div className=\"weatherInfo\">\r\n                <div className=\"temperature\">\r\n                    <span>{temp}&deg;</span>\r\n                </div>\r\n\r\n                <div className=\"description\">\r\n                    <div className=\"weatherCondition\">{weathermood}</div>\r\n                        <div className=\"place\">{name}, {country}</div>\r\n\r\n                   \r\n\r\n                </div>\r\n            </div>\r\n             <div className=\"date\">{new Date().toLocaleString()}</div>\r\n        {/* our four coloumn section */}\r\n        <div className=\"extra-temp\">\r\n            <div className=\"temp-info-minmax\">\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className={\"wi wi-sunset\"}></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {timeStr} PM<br/>\r\n                        sunset\r\n                    </p>\r\n                </div>\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className={\"wi wi-humidity\"}></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {humidity}<br/>\r\n                        humidity\r\n                    </p>\r\n                </div>\r\n            </div>\r\n         <div className=\"weather-extra-info\">\r\n         <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className={\"wi wi-rain\"}></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {pressure}<br/>\r\n                        pressure\r\n                    </p>\r\n                </div>\r\n                <div className=\"two-sided-section\">\r\n                    <p>\r\n                        <i className={\"wi wi-strong-wind\"}></i>\r\n                    </p>\r\n                    <p className=\"extra-info-leftside\">\r\n                        {speed}<br/>\r\n                        speed\r\n                    </p>\r\n                </div>\r\n         </div>\r\n        </div>\r\n\r\n        </article>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Weathercard\r\n","import React,{useState,useEffect} from 'react';\r\nimport \"./style.css\";\r\nimport Weathercard from \"./weathercard\"\r\nconst Temp = () => {\r\nconst[searchValue,setSearchValue]=useState(\"patna\");\r\nconst [tempInfo,setTempInfo]=useState({});\r\nconst getWeatherInfo=async()=>{\r\n  try{\r\n      let url=`https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=a27b0398d5b89178572e7ebae16b454a`;\r\n      let res= await fetch(url);\r\n      let data=await res.json();\r\n      const{temp,humidity,pressure}=data.main;\r\n      const{main:weathermood}=data.weather[0];\r\n      const{name}=data;\r\n      const{speed}=data.wind;\r\n      const{country,sunset}=data.sys;\r\n\r\n      const myNewWeather={\r\n          temp,\r\n          humidity,\r\n          pressure,\r\n          weathermood,\r\n          name,\r\n          speed,\r\n          country,\r\n          sunset,\r\n      };\r\n      setTempInfo(myNewWeather);\r\n  } catch(error){\r\n      console.log(error);\r\n  }\r\n};\r\nuseEffect(() => {\r\n    getWeatherInfo();\r\n}, []);\r\n\r\n\r\n    return(<>\r\n        <div className=\"wrap\">\r\n            <div className=\"search\">\r\n                <input type=\"search\"\r\n                placeholder=\"search..\"\r\n                autoFocus\r\n                id=\"search\"\r\n                className=\"searchterm\"\r\n                value={searchValue}\r\n                onChange={(e)=>setSearchValue(e.target.value) }\r\n                />\r\n                <button className=\"searchButton\" type=\"button\" onClick={getWeatherInfo}> Search</button>\r\n            </div>\r\n            \r\n        </div>\r\n        {/* our temp card */}\r\n        <Weathercard tempInfo={tempInfo}/>\r\n        </> );\r\n}\r\n\r\nexport default Temp\r\n","\nimport React from 'react'\nimport Temp from \"./components/weather/temp\";\nconst App = () => {\n  return (\n    <>\n      <Temp/>\n    </>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}